class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.size() == 0)
            return {-1, -1};
        else
        {
        int start = 0;
        int end = nums.size() - 1;
        int start_index = lowerBound(nums, target);
        int end_index = upperBound(nums, target);
            return vector<int> {start_index, end_index};
        }   
    }
private:
    int lowerBound(vector<int>& nums, int target)
    {
        int start = 0; 
        int end = nums.size() - 1;
        int mid;
        while(start <= end)
        {
            mid = start + (end - start)/2;
            if(nums[mid] < target)
            {
                start = mid + 1;
            }
            else if(nums[mid] > target) 
            {
                end = mid - 1;
            }
            else
            {
                if(mid == 0 || nums[mid - 1] != nums[mid])
                    break;
                else
                {
                    end = mid - 1;
                }
            }
        }
        if(nums[mid] == target)
            return mid;
        else
            return -1;
    }
     int upperBound(vector<int>& nums, int target)
    {
        int start = 0; 
        int end = nums.size() - 1;
        int mid;
        while(start <= end)
        {
            mid = start + (end - start)/2;
            if(nums[mid] > target)
            {
                end = mid - 1;
            }
            else if(nums[mid] < target)
            {
                start = mid + 1;
            }
            else
            {
               if(mid == nums.size() - 1 || nums[mid + 1] != nums[mid])
                    break;
                else
                {
                    start = mid + 1;
                }
            }
            
        }
        if(nums[mid] == target)
            return mid;
         else
             return -1;
    }
};
