class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        const int m = nums1.size();
        const int n = nums2.size();
        int total = m + n;
        if(total&0x1)
            return find_kth(nums1.begin(),m, nums2.begin(), n, (total + 1) / 2);
        else
            return (find_kth(nums1.begin(), m, nums2.begin(),n, total/2) + find_kth(nums1.begin(),m,nums2.begin(), n, total/2 + 1))/2.0;
    }
private:
   static int find_kth(std::vector<int>::const_iterator it1, int m, std::vector<int>::const_iterator it2, int n, int k)
    {
        if(m > n)
            return find_kth(it2, n, it1, m, k);
        if(m == 0)
            return *(it2 + k - 1);
        if(k == 1)
            return min(*it1, *it2);
        int la = min(k/2, m);
        int lb = k - la;
        if(*(it1 + la - 1) < *(it2 + lb - 1))
            return find_kth(it1 + la, m - la, it2, n, k - la);
        else if(*(it1 + la - 1) > *(it2 + lb - 1))
            return find_kth(it1, m, it2 + lb, n - lb, k - lb);
        else
            return it1[la - 1];
       
    }
};
